package es.caib.avaedi.common.model;

// Generated 21-sep-2016 17:21:16

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

import es.caib.avaedi.at4forms.common.basedao.BaseModel;

/**
 * Cimentaciones generated by hbm2java
 */
@Entity
@Table(name = "aed_cimentaciones")
public class Cimentaciones extends BaseModel implements java.io.Serializable {

	/** serialVersionUID */
	private static final long serialVersionUID = 1L;

	private int claveInforme;
	private Inspeccion inspeccion;
	private String cimentacionprofundaTexto;
	private String cimentacionsuperficialTexto;
	private String observaciones;
	private String sistemascontencionTexto;

	public Cimentaciones() {
	}

	public Cimentaciones(Inspeccion inspeccion, String cimentacionprofundaTexto) {
		this.inspeccion = inspeccion;
		this.cimentacionprofundaTexto = cimentacionprofundaTexto;
	}

	public Cimentaciones(Inspeccion inspeccion, String cimentacionprofundaTexto, String cimentacionsuperficialTexto, String observaciones, String sistemascontencionTexto) {
		this.inspeccion = inspeccion;
		this.cimentacionprofundaTexto = cimentacionprofundaTexto;
		this.cimentacionsuperficialTexto = cimentacionsuperficialTexto;
		this.observaciones = observaciones;
		this.sistemascontencionTexto = sistemascontencionTexto;
	}

	@GenericGenerator(name = "generator", strategy = "foreign", parameters = @Parameter(name = "property", value = "inspeccion"))
	@Id
	@GeneratedValue(generator = "generator")
	@Column(name = "clave_informe", unique = true, nullable = false)
	public int getClaveInforme() {
		return this.claveInforme;
	}

	public void setClaveInforme(int claveInforme) {
		this.claveInforme = claveInforme;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "clave_informe", unique = true, nullable = false)
	public Inspeccion getInspeccion() {
		return this.inspeccion;
	}

	public void setInspeccion(Inspeccion inspeccion) {
		this.inspeccion = inspeccion;
	}

	@Column(name = "cimentacionprofunda_texto")
	public String getCimentacionprofundaTexto() {
		return this.cimentacionprofundaTexto;
	}

	public void setCimentacionprofundaTexto(String cimentacionprofundaTexto) {
		this.cimentacionprofundaTexto = cimentacionprofundaTexto;
	}

	@Column(name = "cimentacionsuperficial_texto")
	public String getCimentacionsuperficialTexto() {
		return this.cimentacionsuperficialTexto;
	}

	public void setCimentacionsuperficialTexto(String cimentacionsuperficialTexto) {
		this.cimentacionsuperficialTexto = cimentacionsuperficialTexto;
	}

	@Column(name = "observaciones")
	public String getObservaciones() {
		return this.observaciones;
	}

	public void setObservaciones(String observaciones) {
		this.observaciones = observaciones;
	}

	@Column(name = "sistemascontencion_texto")
	public String getSistemascontencionTexto() {
		return this.sistemascontencionTexto;
	}

	public void setSistemascontencionTexto(String sistemascontencionTexto) {
		this.sistemascontencionTexto = sistemascontencionTexto;
	}

	/**
	 * toString
	 * 
	 * @return String
	 */
	public String toString() {
		StringBuffer buffer = new StringBuffer();

		buffer.append(getClass().getName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
		buffer.append("claveInforme").append("='").append(getClaveInforme()).append("' ");
		buffer.append("inspeccion").append("='").append(getInspeccion()).append("' ");
		buffer.append("]");

		return buffer.toString();
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if ((other == null))
			return false;
		if (!(other instanceof Cimentaciones))
			return false;
		Cimentaciones castOther = (Cimentaciones) other;

		return (this.getClaveInforme() == castOther.getClaveInforme()) && ((this.getInspeccion() == castOther.getInspeccion()) || (this.getInspeccion() != null && castOther.getInspeccion() != null && this.getInspeccion().equals(castOther.getInspeccion())));
	}

	public int hashCode() {
		int result = 17;

		result = 37 * result + this.getClaveInforme();
		result = 37 * result + (getInspeccion() == null ? 0 : this.getInspeccion().hashCode());

		return result;
	}

}
