package es.caib.avaedi.common.model;

// Generated 12-sep-2016 10:10:37

import static javax.persistence.GenerationType.SEQUENCE;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import es.caib.avaedi.at4forms.common.basedao.BaseModel;
import es.caib.avaedi.logic.bo.TipusIee;

/**
 * Informe generated by hbm2java
 */
@Entity
@Table(name = "aed_informe")
public class Informe extends BaseModel implements java.io.Serializable {

	/** serialVersionUID */
	private static final long serialVersionUID = 1L;

	private int clave;
	private EstadoInforme estadoInforme;
	private Edificio edificio;
	private Date fechaInforme;
	private Date fechaAlta;
	/**
	 * Codi de arxiu del document
	 */
	private Long ieeArxiu;
	/**
	 * Mime del document
	 */
	// S'utilitzarà aquest capm per emmagatzemar els valors de tipusIee i renovació
	private String ieeArxiuMime;
	/**
	 * Codi de arxiu del document
	 */
	private Long pdfArxiu;
	/**
	 * Mime del document
	 */
	private String pdfArxiuMime;
	private Inspeccion inspeccion;


	public Informe() {
	}

	public Informe(EstadoInforme estadoInforme, Edificio edificio, Date fechaInforme, Date fechaAlta) {
		this.estadoInforme = estadoInforme;
		this.edificio = edificio;
		this.fechaInforme = fechaInforme;
		this.fechaAlta = fechaAlta;
	}

	public Informe(EstadoInforme estadoInforme, Edificio edificio, Date fechaInforme, Date fechaAlta, Long ieeArxiu, String ieeArxiuMime, Long pdfArxiu, String pdfArxiuMime) {
		this.estadoInforme = estadoInforme;
		this.edificio = edificio;
		this.fechaInforme = fechaInforme;
		this.fechaAlta = fechaAlta;
		this.ieeArxiu = ieeArxiu;
		this.ieeArxiuMime = ieeArxiuMime;
		this.pdfArxiu = pdfArxiu;
		this.pdfArxiuMime = pdfArxiuMime;
	}

	@SequenceGenerator(name = "generator", sequenceName = "AED_INFORME_SEQ", allocationSize = 1)
	@Id
	@GeneratedValue(strategy = SEQUENCE, generator = "generator")
	@Column(name = "clave", unique = true, nullable = false)
	public int getClave() {
		return this.clave;
	}

	public void setClave(int clave) {
		this.clave = clave;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "clave_estado_informe", nullable = false)
	public EstadoInforme getEstadoInforme() {
		return this.estadoInforme;
	}

	public void setEstadoInforme(EstadoInforme estadoInforme) {
		this.estadoInforme = estadoInforme;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "clave_edificio", nullable = false)
	public Edificio getEdificio() {
		return this.edificio;
	}

	public void setEdificio(Edificio edificio) {
		this.edificio = edificio;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "fecha_informe", nullable = false, length = 13)
	public Date getFechaInforme() {
		return this.fechaInforme;
	}

	public void setFechaInforme(Date fechaInforme) {
		this.fechaInforme = fechaInforme;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "fecha_alta", nullable = false, length = 13)
	public Date getFechaAlta() {
		return this.fechaAlta;
	}

	public void setFechaAlta(Date fechaAlta) {
		this.fechaAlta = fechaAlta;
	}

	/**
	 * * Codi de arxiu del document
	 */
	// Delimitar valors amb un caràcter especial, per exemple, "|"
	private static final String DELIMITER = "|";
	private static final String B_TRUE = "T";
	private static final String B_FALSE = "F";


	@Column(name = "iee_arxiu")
	public Long getIeeArxiu() {
		return this.ieeArxiu;
	}

	public void setIeeArxiu(Long ieeArxiu) {
		this.ieeArxiu = ieeArxiu;
	}

	/**
	 * * Mime del document
	 */

	@Column(name = "iee_arxiu_mime", length = 128)
	public String getIeeArxiuMime() {
		if (ieeArxiuMime != null) {
			String[] parts = ieeArxiuMime.split(DELIMITER);
			if (parts.length > 0) {
				return parts[0];
			}
		}
		return ieeArxiuMime; // Retorna el valor complet si no hi ha delimitadors
	}

	public void setIeeArxiuMime(String ieeArxiuMime) {
		StringBuilder sb = new StringBuilder();
		if (this.ieeArxiuMime != null) {
			String[] parts = this.ieeArxiuMime.split(DELIMITER);
			sb.append(ieeArxiuMime); // Timus mime
			sb.append(DELIMITER);
			sb.append(parts.length > 2 ? parts[2] : ""); // Tipus IEE
			sb.append(DELIMITER);
			sb.append(parts.length > 2 ? parts[2] : B_FALSE); // Renovacio
			sb.append(DELIMITER);
			sb.append(parts.length > 3 ? parts[3] : B_FALSE); // Subsanacio
		} else {
			sb.append(ieeArxiuMime).append(DELIMITER).append("").append(DELIMITER).append(B_FALSE).append(DELIMITER).append(B_FALSE);
		}
		this.ieeArxiuMime = ieeArxiuMime;
	}

	// TipusIee
	@Transient
	public TipusIee getTipusIee() {
		if (ieeArxiuMime != null) {
			String[] parts = ieeArxiuMime.split(DELIMITER);
			if (parts.length > 1) {
				try {
					return TipusIee.fromString(parts[1]);
				} catch (NumberFormatException e) {
					// Tractar l'error en convertir a enter
					e.printStackTrace();
				}
			}
		}
		return null; // valor per defecte si no s'ha establert
	}

	public void setTipusIee(TipusIee tipusIee) {
		StringBuilder sb = new StringBuilder();
		if (this.ieeArxiuMime != null) {
			String[] parts = this.ieeArxiuMime.split(DELIMITER);
			sb.append(parts.length > 0 ? parts[0] : ""); // Timus mime
			sb.append(DELIMITER);
			sb.append(tipusIee.name()); // Tipus IEE
			sb.append(DELIMITER);
			sb.append(parts.length > 2 ? parts[2] : B_FALSE); // Renovacio
			sb.append(DELIMITER);
			sb.append(parts.length > 3 ? parts[3] : B_FALSE); // Subsanacio
		} else {
			sb.append(DELIMITER).append(tipusIee).append(DELIMITER).append(B_FALSE).append(DELIMITER).append(B_FALSE);
		}
		this.ieeArxiuMime = sb.toString();
	}

	// Renovació
	@Transient
	public Boolean isRenovacio() {
		if (ieeArxiuMime != null) {
			String[] parts = ieeArxiuMime.split(DELIMITER);
			if (parts.length > 2) {
				return B_TRUE.equals(parts[2]);
			}
		}
		return false; // valor per defecte si no s'ha establert
	}

	public void setRenovacio(boolean renovacio) {
		StringBuilder sb = new StringBuilder();
		if (this.ieeArxiuMime != null) {
			String[] parts = this.ieeArxiuMime.split(DELIMITER);
			sb.append(parts.length > 0 ? parts[0] : ""); // Tipus mime
			sb.append(DELIMITER);
			sb.append(parts.length > 1 ? parts[1] : ""); // Tipus IEE
			sb.append(DELIMITER);
			sb.append(renovacio ? B_TRUE : B_FALSE); // Renoació
			sb.append(DELIMITER);
			sb.append(parts.length > 3 ? parts[3] : B_FALSE); // Subsanació
		} else {
			sb.append(DELIMITER).append(DELIMITER).append(renovacio).append(DELIMITER).append(B_FALSE);
		}
		this.ieeArxiuMime = sb.toString();
	}

	@Transient
	public boolean isSubsana() {
		if (ieeArxiuMime != null) {
			String[] parts = ieeArxiuMime.split(DELIMITER);
			if (parts.length > 3) {
				return B_TRUE.equals(parts[3]);
			}
		}
		return false; // valor per defecte si no s'ha establert
	}

	public void setSubsana(boolean subsana) {
		StringBuilder sb = new StringBuilder();
		if (this.ieeArxiuMime != null) {
			String[] parts = this.ieeArxiuMime.split(DELIMITER);
			sb.append(parts.length > 0 ? parts[0] : ""); // Tipus mime
			sb.append(DELIMITER);
			sb.append(parts.length > 1 ? parts[1] : ""); // Tipus IEE
			sb.append(DELIMITER);
			sb.append(parts.length > 2 ? parts[2] : B_FALSE); // Renovació
			sb.append(DELIMITER);
			sb.append(subsana ? B_TRUE : B_FALSE); // Subsanacio
		} else {
			sb.append(DELIMITER).append("").append(DELIMITER).append(B_FALSE).append(DELIMITER).append(subsana);
		}
		this.ieeArxiuMime = sb.toString();
	}

	/**
	 * * Codi de arxiu del document
	 */

	@Column(name = "pdf_arxiu")
	public Long getPdfArxiu() {
		return this.pdfArxiu;
	}

	public void setPdfArxiu(Long pdfArxiu) {
		this.pdfArxiu = pdfArxiu;
	}

	/**
	 * * Mime del document
	 */

	@Column(name = "pdf_arxiu_mime", length = 128)
	public String getPdfArxiuMime() {
		return this.pdfArxiuMime;
	}

	public void setPdfArxiuMime(String pdfArxiuMime) {
		this.pdfArxiuMime = pdfArxiuMime;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "clave", unique = true, nullable = false)
	public Inspeccion getInspeccion() {
		return this.inspeccion;
	}

	public void setInspeccion(Inspeccion inspeccion) {
		this.inspeccion = inspeccion;
	}

	/**
	 * toString
	 * 
	 * @return String
	 */
	public String toString() {
		StringBuffer buffer = new StringBuffer();

		buffer.append(getClass().getName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
		buffer.append("clave").append("='").append(getClave()).append("' ");
		buffer.append("]");

		return buffer.toString();
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if ((other == null))
			return false;
		if (!(other instanceof Informe))
			return false;
		Informe castOther = (Informe) other;

		return (this.getClave() == castOther.getClave());
	}

	public int hashCode() {
		int result = 17;

		result = 37 * result + this.getClave();

		return result;
	}

}
